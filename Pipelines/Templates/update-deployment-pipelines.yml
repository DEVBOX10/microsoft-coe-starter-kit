parameters:
- name: orgUrl
  type: string
- name: project
  type: string
- name: repo
  type: string
- name: solutionName
  type: string
- name: profileId
  type: string
- name: configurationData
  type: string

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- powershell: |
    New-Item -ItemType "directory" -Name "../coe-starter-kit-source"
    cd ../coe-starter-kit-source
    git clone -b "mochs-coeclibuild" "https://github.com/microsoft/coe-starter-kit.git"

    cd coe-starter-kit\coe-cli
    npm install
    npm run build
    npm link
    $environments = ""
    if(-Not [string]::IsNullOrWhiteSpace('${{parameters.configurationData}}')) {
        #The configuration data will point to the records in Dataverse that store the JSON to set pipeline variables. Try/Catch for invalid json
        try
        {
            $configCriterias = ConvertFrom-Json '${{parameters.configurationData}}'
            $settingsConn = Get-CrmConnection -ConnectionString "$(CdsBaseConnectionString)$($configCriterias.EnvironmentUrl)"
            $deploymentSteps = Get-CrmRecords -conn $settingsConn -EntityLogicalName cat_deploymentstep -FilterAttribute "cat_deploymentprofileid" -FilterOperator "eq" -FilterValue ${{parameters.profileId}} -Fields cat_deploymentenvironmentid,cat_name
            if($deploymentSteps.Count -gt 0) {
                foreach($deploymentStep in $deploymentSteps) {
                    if($deploymentStep.cat_deploymentenvironmentid -ne $null) {
                        if(-Not [string]::IsNullOrWhiteSpace($environments)) {
                            $environments = $environments + ","
                        }
                        $environment = Get-CrmRecord -conn $conn -EntityLogicalName cat_deploymentenvironment -Id $deploymentStep.cat_deploymentenvironmentid -Fields cat_url
                        if(-Not [string]::IsNullOrWhiteSpace($environment.cat_url) -and -Not [string]::IsNullOrWhiteSpace($deploymentStep.cat_name)) {
                            $environments = $environments + $deploymentStep.cat_name.ToLower() + "=" + $environment.cat_url
                        }
                    }
                }
            }
        }
        catch
        {
            Write-Host "##vso[task.logissue type=warning]Invalid JSON was supplied for parameter configurationData."
        }
    }
    Write-Host $environments
    coe aa4am branch -o ${{parameters.orgUrl}} -p ${{parameters.project}} -r ${{parameters.repo}} -d ${{parameters.solutionName}} -a $env:SYSTEM_ACCESSTOKEN -s $environments
  displayName: 'Update Deployment Pipelines'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
