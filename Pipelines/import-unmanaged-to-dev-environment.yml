trigger: none

# variables passed in by API:
# - SolutionName
# - ServiceConnName
# - BuildDefinitionId
# - PipelineId
#
# NOTE: If you want to use different values for these variables, you can remove the variable group and attach them directly to this pipeline.
variables:
- group: global-variable-group

name: import-$(SolutionName)

pool:
  vmImage: 'windows-2019'

steps:
- checkout: none

# Get the solution package from artifact uploaded by the build pipeline
- task: DownloadPipelineArtifact@2
  displayName: 'Download Pipeline Artifact'
  inputs:
    buildType: specific
    project: '$(System.TeamProjectId)'
    definition: $(BuildDefinitionId)
    artifactName: drop
    pipelineId: $(PipelineId)
    buildVersionToDownload: specific
    allowPartiallySucceededBuilds: true
    path: '$(Pipeline.Workspace)/drop'

- powershell: |
   Write-Host "$(System.TeamProjectId)-$(BuildDefinitionId)-$(PipelineId)"
   Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter "$(SolutionName)*.zip" | 
   ForEach-Object {
       If (-Not $_.FullName.Contains("_managed")) 
       { 
         $unmanagedSolutionPath = $_.FullName 
       }
   }
   Write-Host "##vso[task.setVariable variable=UnmanagedSolutionPath]$unmanagedSolutionPath"
   Write-Host $unmanagedSolutionPath
  displayName: 'Get unmanaged solution zip path'

- template: Templates\deploy-Solution.yml
  parameters:
    serviceConnection: '$(ServiceConnName)'
    environmentVariables: '$(DevEnvironmentVariables)'
    connectionReferences: '$(DevConnectionReferences)'
    aadGroupTeamConfiguration: '$(DevAadGroupTeamConfiguration)'
    aadGroupCanvasConfiguration: '$(DevAadGroupCanvasConfiguration)'
    solutionComponentOwnershipConfiguration: '$(DevSolutionComponentOwnershipConfiguration)'

- template: Templates\update-canvas-app-ownership.yml
  parameters:
    serviceConnection: '$(ServiceConnName)'